// Generated by CoffeeScript 1.4.0
(function() {

  (function() {
    var naturaltime, naturaltimesince, naturaltimeuntil, now, since_deltas, until_delta;
    since_deltas = {
      30: function() {
        return "just now";
      },
      60: function() {
        return "less than a minute ago";
      },
      120: function() {
        return "a minute ago";
      },
      600: function() {
        return "a few minutes ago";
      },
      960: function() {
        return "about 10 minutes ago";
      },
      1500: function() {
        return "about 20 minutes ago";
      }
    };
    until_delta = {
      30: function() {
        return "in a few seconds";
      },
      60: function() {
        return "in less than a minute";
      },
      120: function() {
        return "in a minute";
      },
      600: function() {
        return "in a few minutes";
      },
      960: function() {
        return "in about 10 minutes";
      },
      1500: function() {
        return "in about 20 minutes";
      }
    };
    now = function() {
      return new Date();
    };
    naturaltimesince = function(time, compare) {
      var compare_delta, delta;
      if (compare == null) {
        compare = now();
      }
      compare_delta = (time - compare.getTime()) / -1000;
      for (delta in since_deltas) {
        if (compare_delta < delta) {
          return since_deltas[delta]();
        }
      }
    };
    naturaltimeuntil = function(time, compare) {
      var compare_delta, delta;
      if (compare == null) {
        compare = now();
      }
      compare_delta = (time - compare.getTime()) / 1000;
      for (delta in since_deltas) {
        if (compare_delta < delta) {
          return since_deltas[delta]();
        }
      }
    };
    naturaltime = function(compare) {
      var time;
      if (compare == null) {
        compare = now();
      }
      time = this.getTime();
      if ((compare.getTime() - time) > 1) {
        return naturaltimesince(time, compare);
      } else {
        return naturaltimeuntil(time, compare);
      }
    };
    return Date.prototype.natural = naturaltime;
  })();

}).call(this);
