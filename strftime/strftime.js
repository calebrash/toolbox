// Generated by CoffeeScript 1.4.0
(function() {
  var strftime, _f;

  _f = {
    d: function(date) {
      var d;
      d = date.getDate();
      if (d.length === 1) {
        d = "0" + d;
      }
      return d;
    },
    D: function(date) {
      switch (date.getDay()) {
        case 0:
          return "Sun";
        case 1:
          return "Mon";
        case 2:
          return "Tue";
        case 3:
          return "Wed";
        case 4:
          return "Thu";
        case 5:
          return "Fri";
        case 6:
          return "Sat";
      }
    },
    j: function(date) {
      return date.getDate();
    },
    l: function(date) {
      switch (date.getDay()) {
        case 0:
          return "Sunday";
        case 1:
          return "Monday";
        case 2:
          return "Tuesday";
        case 3:
          return "Wednesday";
        case 4:
          return "Thursday";
        case 5:
          return "Friday";
        case 6:
          return "Saturday";
      }
    },
    N: function(date) {
      var d;
      d = date.getDay();
      if (d === 0) {
        d = 7;
      }
      return d;
    },
    S: function(date) {
      var d, m;
      d = date.getDate();
      m = d % 10;
      if (m === 1 && d !== 11) {
        return "st";
      }
      if (m === 2 && d !== 12) {
        return "nd";
      }
      if (m === 3 && d !== 13) {
        return "rd";
      }
      return "th";
    },
    w: function(date) {
      return date.getDay();
    },
    z: function(date) {
      var d;
      d = new Date(date.getFullYear(), 0, 0);
      return Math.floor((date - d) / 8.64e+7);
    },
    W: function(date) {
      var d;
      d = new Date(date.getFullYear(), 0, 0);
      return Math.floor((date - d) / (8.64e+7 * 7));
    },
    F: function(date) {
      switch (date.getMonth()) {
        case 0:
          return "January";
        case 1:
          return "February";
        case 2:
          return "March";
        case 3:
          return "April";
        case 4:
          return "May";
        case 5:
          return "June";
        case 6:
          return "July";
        case 7:
          return "August";
        case 8:
          return "Septempter";
        case 9:
          return "October";
        case 10:
          return "November";
        case 11:
          return "December";
      }
    },
    m: function(date) {
      var d;
      d = date.getMonth() + 1;
      if (d.length === 1) {
        d = "0" + d;
      }
      return d;
    },
    M: function(date) {
      switch (date.getMonth()) {
        case 0:
          return "Jan";
        case 1:
          return "Feb";
        case 2:
          return "Mar";
        case 3:
          return "Apr";
        case 4:
          return "May";
        case 5:
          return "Jun";
        case 6:
          return "Jul";
        case 7:
          return "Aug";
        case 8:
          return "Sep";
        case 9:
          return "Oct";
        case 10:
          return "Nov";
        case 11:
          return "Dec";
      }
    },
    n: function(date) {
      return date.getMonth() + 1;
    },
    t: function(date) {
      return new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();
    },
    L: function(date) {
      return new Date(date.getFullYear, 1, 29).getMonth() === 1;
    },
    o: function(date) {
      return this.Y(date);
    },
    Y: function(date) {
      return date.getFullYear();
    },
    y: function(date) {
      return date.getFullYear().toString().substr(2, 2);
    }
  };

  "REMAINING FUNCTIONALITY\nTime	---	---\na	Lowercase Ante meridiem and Post meridiem	am or pm\nA	Uppercase Ante meridiem and Post meridiem	AM or PM\nB	Swatch Internet time	000 through 999\ng	12-hour format of an hour without leading zeros	1 through 12\nG	24-hour format of an hour without leading zeros	0 through 23\nh	12-hour format of an hour with leading zeros	01 through 12\nH	24-hour format of an hour with leading zeros	00 through 23\ni	Minutes with leading zeros	00 to 59\ns	Seconds, with leading zeros	00 through 59\nu	 Microseconds (added in PHP 5.2.2). Note that date() will always generate 000000 since it takes an integer parameter, whereas DateTime::format() does support microseconds.	Example: 654321\nTimezone	---	---\ne	Timezone identifier (added in PHP 5.1.0)	Examples: UTC, GMT, Atlantic/Azores\nI (capital i)	Whether or not the date is in daylight saving time	1 if Daylight Saving Time, 0 otherwise.\nO	Difference to Greenwich time (GMT) in hours	Example: +0200\nP	Difference to Greenwich time (GMT) with colon between hours and minutes (added in PHP 5.1.3)	Example: +02:00\nT	Timezone abbreviation	Examples: EST, MDT ...\nZ	Timezone offset in seconds. The offset for timezones west of UTC is always negative, and for those east of UTC is always positive.	-43200 through 50400\nFull Date/Time	---	---\nc	ISO 8601 date (added in PHP 5)	2004-02-12T15:19:21+00:00\nr	Â» RFC 2822 formatted date	Example: Thu, 21 Dec 2000 16:01:07 +0200\nU       Seconds since the Unix Epoch (January 1 1970 00:00:00 GMT)";


  strftime = function(date, fmt) {
    var char, esc, result, _i, _len;
    fmt = fmt.split("");
    esc = false;
    result = [];
    for (_i = 0, _len = fmt.length; _i < _len; _i++) {
      char = fmt[_i];
      if (esc) {
        esc = false;
        result.push(char);
      } else {
        if (_f[char]) {
          result.push(_f[char](date));
        } else if (char === "\\") {
          esc = true;
        } else {
          result.push(char);
        }
      }
    }
    return result.join("");
  };

  Date.prototype.strftime = function(fmt) {
    return strftime(this, fmt);
  };

}).call(this);
